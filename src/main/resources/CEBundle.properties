codeemoji.configurable.name=codEEmoji Settings
codeemoji.configurable.title=Global Configurations
codeemoji.configurable.external.analysers.title=External Analysers
codeemoji.configurable.oss.api.token=Sonatype OSS Index API Token
codeemoji.configurable.edit=Edit
codeemoji.configurable.delete=Delete
codeemoji.configurable.select_emoji=Select an Emoji
inlay.shortdescriptivename.description=Instead of a descriptive name, the variable's name consists of a few letters.
inlay.shortdescriptivename.name=Short Descriptive Name
inlay.shortdescriptivename.tooltip=Short Descriptive Name
inlay.getmorethanaccessor.description=A getter that doesn't just return the corresponding attribute but also takes other actions. Adapted from Arnaoudova et al.(2016).
inlay.getmorethanaccessor.name=Getter More Than Accessor
inlay.getmorethanaccessor.tooltip=Getter More Than Accessor
inlay.isreturnsmorethanaboolean.description=A method's name is a predicate that denotes a true/false value that will be returned. The return type, however, is a more complex type than boolean. Adapted from Arnaoudova et al.(2016).
inlay.isreturnsmorethanaboolean.name="Is" Returns More Than a Boolean
inlay.isreturnsmorethanaboolean.tooltip="Is" Returns More Than a Boolean
inlay.setmethodreturns.description=A setter method that has a return type other than void. Adapted from Arnaoudova et al.(2016).
inlay.setmethodreturns.name=Setter Method Returns
inlay.setmethodreturns.tooltip=Setter Method Returns
inlay.expectingbutnotgettingasingleinstance.description=Despite the fact that a method's name suggests it will return a single object, it will actually return a collection. Adapted from Arnaoudova et al.(2016).
inlay.expectingbutnotgettingasingleinstance.name=Expecting But Not Getting a Single Instance
inlay.expectingbutnotgettingasingleinstance.tooltip=Expecting But Not Getting a Single Instance
inlay.validationmethoddoesnotconfirm.description=A validation method (such as one with the words <em>validate,</em> <em>check,</em> or <em>ensure</em>) does not confirm the validation; that is, it neither provides a return value indicating whether the validation was successful. Adapted from Arnaoudova et al.(2016).
inlay.validationmethoddoesnotconfirm.name=Validation Method Does Not Confirm
inlay.validationmethoddoesnotconfirm.tooltip=Validation Method Does Not Confirm
inlay.getmethoddoesnotreturn.description=When a method's name begins with <em>get</em> or <em>return</em>, for example, it might be assumed that it returns something, but the return type is actually void. Adapted from Arnaoudova et al.(2016).
inlay.getmethoddoesnotreturn.name=Getter Does Not Return
inlay.getmethoddoesnotreturn.tooltip=Getter Does Not Return
inlay.notansweredquestion.description=A method's name takes the form of a predicate, but its return type is not boolean. Adapted from Arnaoudova et al.(2016).
inlay.notansweredquestion.name=Not Answered Question
inlay.notansweredquestion.tooltip=Not Answered Question
inlay.transformmethoddoesnotreturn.description=While there is no return value, a method's name implies that an object has been transformed. Adapted from Arnaoudova et al.(2016).
inlay.transformmethoddoesnotreturn.name=Transform Method Does Not Return
inlay.transformmethoddoesnotreturn.tooltip=Transform Method Does Not Return
inlay.expectingbutnotgettingacollection.description=Even though a method's name suggests a collection should be returned, nothing or just one object is instead given. Adapted from Arnaoudova et al.(2016).
inlay.expectingbutnotgettingacollection.name=Expecting But Not Getting a Collection
inlay.expectingbutnotgettingacollection.tooltip=Expecting But Not Getting a Collection
inlay.saysonebutcontainsmany.description=An attribute's type suggests that it stores a collection of objects, contrary to the name, which suggests a single instance. Adapted from Arnaoudova et al.(2016).
inlay.saysonebutcontainsmany.name=Says One But Contains Many
inlay.saysonebutcontainsmany.tooltip=Says One But Contains Many
inlay.namesuggestsbooleanbytypedoesnot.description=An attribute's name implies that its value is true or false, yet its defining type is not boolean. Adapted from Arnaoudova et al.(2016).
inlay.namesuggestsbooleanbytypedoesnot.name=Name Suggests Boolean By Type Does Not
inlay.namesuggestsbooleanbytypedoesnot.tooltip=Name Suggests Boolean By Type Does Not
inlay.saysmanybutcontainsone.description=The name of an attribute suggests multiple instances, but its type suggests a single one. Adapted from Arnaoudova et al.(2016).
inlay.saysmanybutcontainsone.name=Says Many But Contains One
inlay.saysmanybutcontainsone.tooltip=Says Many But Contains One
inlay.namecontainsonlyspecialcharacters.description=The identifier's name is made up entirely of non-alphanumeric characters. Adapted from Arnaoudova et al.(2016).
inlay.namecontainsonlyspecialcharacters.name=Name Contains Only Special Characters
inlay.namecontainsonlyspecialcharacters.tooltip=Name Contains Only Special Characters
inlay.showingmodifiers.description=Showing the presence of modifiers.
inlay.showingmodifiers.name=Showing Modifiers
inlay.showingmodifiers.options.title.modifiers=Modifiers
inlay.showingmodifiers.options.title.openprojects=Open Projects
inlay.showingmodifiers.options.title.classes=Classes
inlay.showingmodifiers.options.title.fields=Fields
inlay.showingmodifiers.options.title.methods=Methods
inlay.showingmodifiers.options.title.variables=Variables
inlay.showingmodifiers.class.public.tooltip=(Showing Modifiers) "public" on class
inlay.showingmodifiers.class.default.tooltip=(Showing Modifiers) "default" on class
inlay.showingmodifiers.class.final.tooltip=(Showing Modifiers) "final" on class
inlay.showingmodifiers.class.abstract.tooltip=(Showing Modifiers) "abstract" on class
inlay.showingmodifiers.field.public.tooltip=(Showing Modifiers) "public" on field
inlay.showingmodifiers.field.default.tooltip=(Showing Modifiers) "default" on field
inlay.showingmodifiers.field.final.tooltip=(Showing Modifiers) "final" on field
inlay.showingmodifiers.field.protected.tooltip=(Showing Modifiers) "protected" on field
inlay.showingmodifiers.field.private.tooltip=(Showing Modifiers) "private" on field
inlay.showingmodifiers.field.static.tooltip=(Showing Modifiers) "static" on field
inlay.showingmodifiers.field.volatile.tooltip=(Showing Modifiers) "volatile" on field
inlay.showingmodifiers.field.transient.tooltip=(Showing Modifiers) "transient" on field
inlay.showingmodifiers.method.public.tooltip=(Showing Modifiers) "public" on method
inlay.showingmodifiers.method.default.tooltip=(Showing Modifiers) "default" on method
inlay.showingmodifiers.method.final.tooltip=(Showing Modifiers) "final" on method
inlay.showingmodifiers.method.protected.tooltip=(Showing Modifiers) "protected" on method
inlay.showingmodifiers.method.private.tooltip=(Showing Modifiers) "private" on method
inlay.showingmodifiers.method.static.tooltip=(Showing Modifiers) "static" on method
inlay.showingmodifiers.method.abstract.tooltip=(Showing Modifiers) "abstract" on method
inlay.showingmodifiers.method.synchronized.tooltip=(Showing Modifiers) "synchronized" on method
inlay.showingmodifiers.method.native.tooltip=(Showing Modifiers) "native" on method
inlay.showingmodifiers.method.defaultinterface.tooltip=(Showing Modifiers) "default (in interface)" on method

inlay.public.name=Public
inlay.default.name=Default
inlay.protected.name=Protected
inlay.private.name=Private
inlay.final.name=Final
inlay.finalvar.name=Final
inlay.abstract.name=Abstract
inlay.static.name=Static
inlay.synchronized.name=Synchronized
inlay.native.name=Native
inlay.defaultinterface.name=Default
inlay.volatile.name=Volatile
inlay.transient.name=Transient

inlay.showingspecifics.description=Showing specifics of the project.
inlay.showingspecifics.name=Showing Specifics of the Project
inlay.showingspecifics.class.annotations.tooltip=(Showing Specifics) Annotated class
inlay.showingspecifics.class.extends.tooltip=(Showing Specifics) Extends superclass
inlay.showingspecifics.class.implements.tooltip=(Showing Specifics) Implements interface
inlay.showingspecifics.field.annotations.tooltip=(Showing Specifics) Annotated field
inlay.showingspecifics.field.types.tooltip=(Showing Specifics) Field is of a certain type
inlay.showingspecifics.method.annotations.tooltip=(Showing Specifics) Annotated method
inlay.showingspecifics.method.returns.tooltip=(Showing Specifics) Method returns a certain type
inlay.showingspecifics.method.packages.tooltip=(Showing Specifics) Method is invoked from a certain package
inlay.showingspecifics.parameter.annotations.tooltip=(Showing Specifics) Annotated parameter
inlay.showingspecifics.parameter.types.tooltip=(Showing Specifics) Parameter is of a certain type
inlay.showingspecifics.localvariable.annotations.tooltip=(Showing Specifics) Annotated local variable
inlay.showingspecifics.localvariable.types.tooltip=(Showing Specifics) Local variable is of a certain type
inlay.showingspecifics.options.title.project=Project
inlay.showingspecifics.options.title.loaded_rules=Loaded Rules
inlay.showingspecifics.options.title.classes=Classes
inlay.showingspecifics.options.title.fields=Fields
inlay.showingspecifics.options.title.methods=Methods
inlay.showingspecifics.options.title.parameters=Parameters
inlay.showingspecifics.options.title.localvariables=Local Variables
inlay.showingspecifics.options.title.noruleloaded=No rule loaded
inlay.showingspecifics.options.title.noruleloaded.howtoconfigure=How to configure
inlay.implicitannotations.description=Implicit Annotations.
inlay.implicitannotations.name=Implicit Annotations
inlay.implicitannotations.annotations.tooltip=Implicit Annotations
inlay.implicitannotations.attributes.tooltip=Implicit Attributes
inlay.implicitannotations.options.title.jpa=Java Persistence
inlay.implicitannotations.options.title.spring=Spring
inlay.highcyclomaticcomplexitymethod.description=A code complexity metric that, based on configurable thresholds, indicates whether a method contains a "very high" number of linearly independent paths with respect to the number of lines in it.<br><br>The algorithm for calculating the metric is adapted from the specification defined by Watson and McCabe (<a href="https://www.mccabe.com/pdf/mccabe-nist235r.pdf">"Structured Testing: A Testing Methodology Using the Cyclomatic Complexity Metric", 1996</a>). Starting from a value <em>S := 1</em>, the code elements present in the method are analyzed to match keywords that create a decision point, therefore, triggering the addition of a new path, which entails increasing <em>S</em> by a factor of 1. The keywords and operators considered in such analysis avoid inspecting single multi-way branch statements (eg. if a switch statement is recognized, add 1 to <em>S</em> for each case label); they are the following:<ul><li>"&amp;&amp;" and "||"</li><li>"if" and "else if"</li><li>"case"</li><li>"for" and "while"</li><li>"try"</li></ul><br>The default value for this metric is set to <em>0.36 Cyclomatic Complexity / Lines of Code</em>, which corresponds to the statistical threshold cited by Lanza and Marinescu (<a href="https://link.springer.com/book/10.1007/3-540-39538-5">"Object-Oriented Metrics in Practice", 2006</a>).<br><br>Notice that the calculation is triggered once the method exceeds the thresholds for the cyclomatic complexity and the line count, which are both set to 1 by default. The line count does not include any superfluous lines covered by comments.<br><br>The inputs below allow changing such values according to personal preference.
inlay.highcyclomaticcomplexitymethod.name=High Cyclomatic Complexity Method
inlay.highcyclomaticcomplexitymethod.tooltip=High Cyclomatic Complexity Method
inlay.largeidentifiercountmethod.description=A code complexity metric that indicates whether a method contains a "very high" number of identifiers based on a configurable threshold. <br/><br/> An identifier indicates a lexical token that associates a symbolic name to a Java syntax entity. For instance, some of the entities an identifier might denote include variables, data types, classes or methods.<br/><br/>The default value is set to <em>70 Identifiers / Method</em>. The input below allows changing it according to personal preference.
inlay.largeidentifiercountmethod.name=Large Identifier Count Method
inlay.largeidentifiercountmethod.tooltip=Large Identifier Count Method
inlay.largelinecountmethod.description=A code complexity metric that indicates whether a method contains a "very high" number of lines of code based on a configurable threshold.<br><br> The default value is set to <em>20 Lines of Code / Method</em>, which corresponds to the rounded up statistical threshold of <em>19.5 Lines of Code / Method</em> cited by Lanza and Marinescu (<a href="https://link.springer.com/book/10.1007/3-540-39538-5">"Object-Oriented Metrics in Practice", 2006</a>). The input below allows changing it according to personal preference.<br><br>Notice that the default calculation also includes any lines covered by comments; the checkbox below allows excluding the padding generated by them.
inlay.largelinecountmethod.name=Large Line Count Method
inlay.largelinecountmethod.tooltip=Large Line Count Method
inlay.largemethodcountclass.description=A code complexity metric that indicates whether a class contains a "very high" number of methods based on a configurable threshold.<br><br>The default value is set to <em>15 Methods / Class</em>, which corresponds to the statistical threshold cited by Lanza and Marinescu (<a href="https://link.springer.com/book/10.1007/3-540-39538-5">"Object-Oriented Metrics in Practice", 2006</a>). The input below allows changing such value according to personal preference.
inlay.largemethodcountclass.name=Large Method Count Class
inlay.largemethodcountclass.tooltip=Large Method Count Class
inlay.externalfunctionalityinvokingmethod.description=A method invoking external functionality contains calls to methods defined outside the source roots of the project currently opened in the editor (see <a href="https://www.jetbrains.com/help/idea/content-roots.html">IntelliJ "content roots"</a>). Additionally, any method originating from a class or interface belonging to a Java core library (inside a "java.*" package) is excluded from the analysis. <br /><br />Note that each method call can be followed recursively until reaching its original caller. If <em>any</em> method on the invocation path to the root invoker matches the criteria specified above, the method being currently analyzed is marked with a hint indicating its external source. Since this might be a costly operation for methods comprising many method calls, this option is turned off by default. The checkbox below allows changing such option according to personal preference.
inlay.externalfunctionalityinvokingmethod.name=External Functionality Invoking Method
inlay.externalfunctionalityinvokingmethod.tooltip=External Functionality Invoking Method
inlay.puregettermethod.description=Also known as "getter", a pure accessor method only contains one statement that returns a field which must be within the class the method is defined in. <br><br>Moreover, if the checkbox below is set to true, the method name must follow the standard <a href="https://www.oreilly.com/library/view/javaserver-pages-3rd/0596005636/ch20s01s01.html">JavaBeans naming convention</a>, which foresees the accessor name to start with "get" (or "is" for boolean fields), followed by the capitalized attribute name being referenced in the statement.
inlay.puregettermethod.name=Pure Getter Method
inlay.puregettermethod.tooltip=Pure Getter Method
inlay.puresettermethod.description=Also known as "setter", a pure mutator method only contains one statement that assigns a single parameter value to a homonymous field which must be qualified and within the class the method is defined in. <br><br> Moreover, if the checkbox below is set to true, the method name must follow the standard <a href="https://www.oreilly.com/library/view/javaserver-pages-3rd/0596005636/ch20s01s01.html">JavaBeans naming convention</a>, which foresees the accessor name to start with "set", followed by the capitalized attribute name being referenced in the statement.
inlay.puresettermethod.name=Pure Setter Method
inlay.puresettermethod.tooltip=Pure Setter Method
inlay.statechangingmethod.description=A method changing state contains value assignments to class fields that are either stated explicitly or implicitly by invoking mutator methods.<br><br>Note that each implicitly state-changing method call can be followed recursively until reaching its original caller. If <em>any</em> method on the invocation path to the root invoker matches the criteria specified above, the method being currently analyzed is marked with a hint indicating its state-changing effect. Since this might be a costly operation for methods comprising many method calls, this option is turned off by default. The checkbox below allows changing such option according to personal preference.
inlay.statechangingmethod.name=State Changing Method
inlay.statechangingmethod.tooltip=State Changing Method
inlay.stateindependentmethod.description=A method that is independent of state does not contain any expressions that reference a class field either explicitly or implicitly through method invocations.<br><br>Note that each implicitly state-independent method call can be followed recursively until reaching its original caller. If <em>all</em> methods on the invocation path to the root invoker match the criteria specified above, the method being currently analyzed is marked with a hint indicating its state independence. Since this might be a costly operation for methods comprising many method calls, this option is turned off by default. The checkbox below allows changing such option according to personal preference.
inlay.stateindependentmethod.name=State Independent Method
inlay.stateindependentmethod.tooltip=State Independent Method
inlay.vulnerabledependency.name=Vulnerable Dependency Call
inlay.vulnerabledependency.description=VulnerableDependency provides inlay hints that highlight methods invoking external libraries with known security vulnerabilities. When activated, it analyzes your code and displays visual indicators next to potentially risky method calls, categorizing them by severity (LOW, MEDIUM, HIGH, CRITICAL). This helps you quickly identify and address security risks in your project's use of external dependencies. Without these hints, vulnerable method calls might go unnoticed, potentially leaving your application exposed to security threats.
inlay.vulnerabledependency.indirectvulnerable.tooltip=Function calling function/s with vulnerable dependencies usage
inlay.vulnerabledependency.call.has=has
inlay.vulnerabledependency.call.vulnerability=vulnerability
inlay.vulnerabledependency.call.vulnerabilities=vulnerabilities
inlay.vulnerabledependency.call.scanner=Scanner -
inlay.vulnerabledependency.call.severity.critical=critical
inlay.vulnerabledependency.call.severity.high=high
inlay.vulnerabledependency.call.severity.medium=medium
inlay.vulnerabledependency.call.severity.low=low
inlay.vulnerabledependency.vulnerablemethod.pt1.tooltip=The method is using 
inlay.vulnerabledependency.vulnerablemethod.pt2.tooltip=vulnerable 
inlay.vulnerabledependency.vulnerablemethod.pt3singular.tooltip=dependency
inlay.vulnerabledependency.vulnerablemethod.pt3plural.tooltip=dependencies
inlay.vulnerablemethod.name=Vulnerable Method
inlay.vulnerabledependencycall.name=Vulnerable Dependency Call
inlay.indirectvulnerablemethod.name=Indirect Vulnerable Method
inlay.implicit.description=TODO: add


inlay.recentlymodified.name=Recently Modified
inlay.recentlymodified.description=Displays an emoji representing the last author that edited the current method. You can add custom emojis for each author by using the 'add' button.
inlay.recentlymodified.settings.show_date=Show date
inlay.recentlymodified.settings.number_of_days=Number of days
inlay.recentlymodified.tooltip.days_ago=Modified %d days ago
inlay.recentlymodified.tooltip.yesterday=Modified yesterday
inlay.recentlymodified.tooltip.today=Modified today
inlay.recentlymodified.tooltip.years_ago=Modified %d years ago

inlay.authoravatar.name=Author Avatar
inlay.authoravatar.settings.author=Author %d
inlay.authoravatar.settings.add_avatar=Add Avatar
inlay.authoravatar.description= Displays an emoji representing the last author that edited the current method. You can add custom emojis for each author by using the 'add' button.

inlay.lastcommit.name=Last Commit
inlay.lastcommit.description=Displays an emoji on methods that were edited in the last commit.
inlay.lastcommit.tooltip=Edited in Last Commit

inlay.toomanyauthors.name=Too Many Authors
inlay.toomanyauthors.description=Displays an emoji on classes that have been edited by too many authors.
inlay.toomanyauthors.tooltip=Class edited by many authors (%s)
inlay.toomanyauthors.settings.minimum_authors=Minimum authors

codeemoji.inlay.vcs.TestProvider
