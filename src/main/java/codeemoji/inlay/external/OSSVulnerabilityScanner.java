package codeemoji.inlay.external;

import org.json.JSONArray;
import org.json.JSONObject;

import java.net.URI;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

public class OSSVulnerabilityScanner extends  VulnerabilityScanner<List<String>, JSONArray> {

    public OSSVulnerabilityScanner(String baseUrl, String apiKey) {
        super(baseUrl, apiKey);
    }

    @Override
    public Map<DependencyInfo, List<VulnerabilityInfo>> scanVulnerability(DependencyInfo[] dependencies) {
        List<String> libraryList = new ArrayList<>();

        for (DependencyInfo dep : dependencies) {
            try {
                libraryList.add("pkg:maven/" + dep.getPath());
            } catch (IllegalArgumentException e) {
                System.err.println("Error processing dependency: " + dep.getName() + ". Error: " + e.getMessage());
            }
        }

        CompletableFuture<JSONArray> future = scanVulnerabilityAsync(libraryList);

        future.thenAccept(results -> processResponse(results, dependencies))
                .exceptionally(this::handleError);
        return vulnerabilityMap;
    }

    @Override
    protected CompletableFuture<JSONArray> scanVulnerabilityAsync(List<String> dependencies) {
        HttpRequest request = createRequest(dependencies);

        return httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString())
                .thenApply(response -> {
                    if (response.statusCode() == 200) {
                        return new JSONArray(response.body());
                    } else {
                        throw new RuntimeException("API request failed with status code: " + response.statusCode());
                    }
                });
    }

    @Override
    protected void processResponse(JSONArray results, DependencyInfo[] dependencies) {
        for (int i = 0; i < results.length(); i++) {
            JSONObject dependency = results.getJSONObject(i);
            String coordinate = dependency.getString("coordinates");
            JSONArray vulnerabilities = dependency.getJSONArray("vulnerabilities");

            System.out.println("Dependency: " + coordinate);
            System.out.println("Vulnerabilities found: " + vulnerabilities.length());

            // Find the corresponding DependencyInfo object
            DependencyInfo dependencyInfo = findDependencyInfo(coordinate, dependencies);
            if (dependencyInfo != null && vulnerabilities.length() > 0) {
                List<VulnerabilityInfo> vulnInfoList = parseVulnerabilityInfo(vulnerabilities);
                vulnerabilityMap.put(dependencyInfo, vulnInfoList);
            }
        }
    }

    @Override
    protected Void handleError(Throwable throwable) {
        System.err.println("Error occurred while scanning dependencies: " + throwable.getMessage());
        throwable.printStackTrace();
        return null;
    }

    @Override
    public HttpRequest createRequest(List<String> dependencies) {
        JSONObject requestBody = new JSONObject();
        requestBody.put("coordinates", new JSONArray(dependencies));

        return HttpRequest.newBuilder()
                .uri(URI.create(BASE_URL))
                .header("Content-Type", "application/json")
                .header("Authorization", "Bearer " + API_KEY)
                .POST(HttpRequest.BodyPublishers.ofString(requestBody.toString()))
                .build();
    }

    private DependencyInfo findDependencyInfo(String coordinate, DependencyInfo[] dependencies) {
        String path = coordinate.substring("pkg:maven/".length());
        for (DependencyInfo dep : dependencies) {
            if (dep.getPath().equals(path)) {
                return dep;
            }
        }
        return null;
    }

    @Override
    protected List<VulnerabilityInfo> parseVulnerabilityInfo(JSONArray vulnerabilitiesArray) {
        List<VulnerabilityInfo> vulnerabilityInfoList = new ArrayList<>();



        for (int j = 0; j < vulnerabilitiesArray.length(); j++) {
            JSONObject vulnObj = vulnerabilitiesArray.getJSONObject(j);

            String cve = vulnObj.optString("cve", "N/A");
            String description = vulnObj.getString("description");
            float cvssScore = (float) vulnObj.getDouble("cvssScore");

            VulnerabilityInfo vulnerabilityInfo = new VulnerabilityInfo(
                    cve,
                    description,
                    cvssScore,
                    VulnerabilityInfo.ScannerType.OSS
            );

            vulnerabilityInfoList.add(vulnerabilityInfo);
        }

        return vulnerabilityInfoList;
    }
}
