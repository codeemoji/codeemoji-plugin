package codeemoji.inlay.external;

import org.json.JSONArray;
import org.json.JSONObject;

import java.net.URI;
import java.net.URLEncoder;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

public class NistVulnerabilityScanner extends VulnerabilityScanner<DependencyInfo, JSONObject> {



    public NistVulnerabilityScanner(String baseUrl, String apiKey, int batchSize) {
        super(baseUrl, apiKey, batchSize);
    }

    @Override
    public Map<DependencyInfo, List<VulnerabilityInfo>> scanVulnerability(DependencyInfo[] dependencies) {
        List<CompletableFuture<Void>> batchFutures = new ArrayList<>();

        for (int i = 0; i < dependencies.length; i += API_BATCH_SIZE) {
            DependencyInfo[] batch = Arrays.copyOfRange(dependencies, i, Math.min(i + API_BATCH_SIZE, dependencies.length));
            CompletableFuture<Void> batchFuture = scanSingleVulnerability(batch);
            batchFutures.add(batchFuture);

            if (i + API_BATCH_SIZE < dependencies.length) {
                try {
                    Thread.sleep(30000); // Wait for 30 seconds before the next batch
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
        }

        // Wait for all batches to complete
        CompletableFuture.allOf(batchFutures.toArray(new CompletableFuture[0])).join();

        return vulnerabilityMap;
    }

    protected CompletableFuture<Void> scanSingleVulnerability(DependencyInfo[] dependencies) {
        List<CompletableFuture<JSONObject>> futures = Arrays.stream(dependencies)
                .map(this::scanVulnerabilityAsync)
                .collect(Collectors.toList());

        return CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]))
                .thenApply(v -> {
                    JSONObject results = new JSONObject();
                    JSONArray resultsArray = new JSONArray();
                    for (CompletableFuture<JSONObject> future : futures) {
                        try {
                            resultsArray.put(future.join());
                        } catch (Exception e) {
                            System.err.println("Error processing a future: " + e.getMessage());
                        }
                    }
                    results.put("results", resultsArray);
                    return results;
                })
                .thenAccept(results -> processResponse(results, dependencies))
                .exceptionally(this::handleError);
    }

    @Override
    protected void processResponse(JSONObject results, DependencyInfo[] dependencies) {
        JSONArray resultsArray = results.getJSONArray("results");
        for (int i = 0; i < resultsArray.length(); i++) {
            JSONObject vulnerabilityReport = resultsArray.getJSONObject(i);
            DependencyInfo dep = dependencies[i];
            try {
                JSONArray vulnerabilitiesArray = vulnerabilityReport.getJSONArray("vulnerabilities");
                List<VulnerabilityInfo> vulnerabilities = parseVulnerabilityInfo(vulnerabilitiesArray);
                if (!vulnerabilities.isEmpty()) {
                    vulnerabilityMap.put(dep, vulnerabilities);
                }
            } catch (Exception e) {
                System.err.println("Error processing vulnerability report for " + dep.getName() + ": " + e.getMessage());
            }
        }
    }

    @Override
    protected Void handleError(Throwable throwable) {
        System.err.println("Error occurred while scanning dependencies: " + throwable.getMessage());
        throwable.printStackTrace();
        return null;
    }

    @Override
    protected CompletableFuture<JSONObject> scanVulnerabilityAsync(DependencyInfo dependency) {
        HttpRequest request = createRequest(dependency);
        return httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString())
                .thenApply(response -> {
                    if (response.statusCode() == 200) {
                        return new JSONObject(response.body());
                    } else {
                        throw new RuntimeException("API request failed with status code: " + response.statusCode());
                    }
                });
    }

    @Override
    protected HttpRequest createRequest(DependencyInfo dependency) {
        String apiUrl = createUrl(dependency);

        return HttpRequest.newBuilder()
                .uri(URI.create(apiUrl))
                .header("apiKey", API_KEY )
                .GET()
                .build();
    }

    private String createUrl(DependencyInfo dependency) {
        String cpe = String.format("cpe:2.3:a:%s:%s:%s:*:*:*:*:*:*:*", dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion());
        String encodedCpe = URLEncoder.encode(cpe, StandardCharsets.UTF_8);
        return BASE_URL + "?cpeName=" + encodedCpe;
    }

    @Override
    protected List<VulnerabilityInfo> parseVulnerabilityInfo(JSONArray vulnerabilitiesArray) {
        List<VulnerabilityInfo> vulnerabilities = new ArrayList<>();


        for (int i = 0; i < vulnerabilitiesArray.length(); i++) {
            JSONObject vuln = vulnerabilitiesArray.getJSONObject(i);
            JSONObject cveInfo = vuln.getJSONObject("cve");

            String cve = cveInfo.getString("id");

            String description = "";
            JSONArray descriptions = cveInfo.getJSONArray("descriptions");
            for (int j = 0; j < descriptions.length(); j++) {
                JSONObject desc = descriptions.getJSONObject(j);
                if (desc.getString("lang").equals("en")) {
                    description = desc.getString("value");
                    break;
                }
            }

            String severity = "UNKNOWN";
            if (cveInfo.has("metrics")) {
                JSONObject metrics = cveInfo.getJSONObject("metrics");
                if (metrics.has("cvssMetricV31")) {
                    JSONArray cvssV31 = metrics.getJSONArray("cvssMetricV31");
                    if (cvssV31.length() > 0) {
                        JSONObject cvssData = cvssV31.getJSONObject(0).getJSONObject("cvssData");
                        severity = cvssData.getString("baseSeverity");
                    }
                }
            }

            vulnerabilities.add(new VulnerabilityInfo(cve, description, severity, VulnerabilityInfo.ScannerType.NIST));
        }

        return vulnerabilities;
    }


}
