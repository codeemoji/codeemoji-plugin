package codeemoji.inlay.external.scanners;

import codeemoji.inlay.external.DependencyInfo;
import codeemoji.inlay.external.VulnerabilityInfo;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import java.net.URI;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

public class OSSVulnerabilityScanner extends  VulnerabilityScanner<List<String>, JsonArray> {

    public OSSVulnerabilityScanner(String baseUrl, String apiKey, int batchSize) {
        super(baseUrl, apiKey, batchSize);
    }

    @Override
    public Map<DependencyInfo, List<VulnerabilityInfo>> scanVulnerability(DependencyInfo[] dependencies) {
        List<String> libraryList = new ArrayList<>();

        for (DependencyInfo dep : dependencies) {
            try {
                libraryList.add("pkg:maven/" + dep.getPath());
            } catch (IllegalArgumentException e) {
                System.err.println("Error processing dependency: " + dep.getPath() + ". Error: " + e.getMessage());
            }
        }

        List<CompletableFuture<Void>> batchFutures = new ArrayList<>();

        for (int i = 0; i < libraryList.size(); i += API_BATCH_SIZE) {
            final int startIndex = i;
            List<String> batch = libraryList.subList(i, Math.min(i + API_BATCH_SIZE, libraryList.size()));
            CompletableFuture<JsonArray> future = scanVulnerabilityAsync(batch);

            CompletableFuture<Void> batchFuture = future.thenAccept(results -> {
                DependencyInfo[] batchDependencies = Arrays.copyOfRange(dependencies, startIndex,
                        Math.min(startIndex + API_BATCH_SIZE, dependencies.length));
                processResponse(results, batchDependencies);
            }).exceptionally(this::handleError);

            batchFutures.add(batchFuture);
        }

        // Wait for all batches to complete
        CompletableFuture.allOf(batchFutures.toArray(new CompletableFuture[0])).join();

        return vulnerabilityMap;
    }

    @Override
    protected CompletableFuture<JsonArray> scanVulnerabilityAsync(List<String> dependencies) {
        HttpRequest request = createRequest(dependencies);

        return httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString())
                .thenApply(response -> {
                    if (response.statusCode() == 200) {
                        return JsonParser.parseString(response.body()).getAsJsonArray();
                    } else {
                        System.err.println("API request failed with status code: " + response.statusCode());
                        return null;
                    }
                });
    }

    @Override
    protected void processResponse(JsonArray results, DependencyInfo[] dependencies) {
        for (int i = 0; i < results.size(); i++) {
            JsonObject dependency = results.get(i).getAsJsonObject();
            String coordinate = dependency.get("coordinates").getAsString();
            JsonArray vulnerabilities = dependency.getAsJsonArray("vulnerabilities");

            System.out.println("Dependency: " + coordinate);
            System.out.println("Vulnerabilities found: " + vulnerabilities.size());

            // Find the corresponding DependencyInfo object
            DependencyInfo dependencyInfo = findDependencyInfo(coordinate, dependencies);
            if (dependencyInfo != null && !vulnerabilities.isEmpty()) {
                List<VulnerabilityInfo> vulnInfoList = parseVulnerabilityInfo(vulnerabilities);
                vulnerabilityMap.put(dependencyInfo, vulnInfoList);
            }
        }
    }

    @Override
    protected Void handleError(Throwable throwable) {
        System.err.println("Error occurred while scanning dependencies: " + throwable.getMessage());
        throwable.printStackTrace();
        return null;
    }

    @Override
    public HttpRequest createRequest(List<String> dependencies) {
        JsonObject requestBody = new JsonObject();
        JsonArray deps = new JsonArray();
        for (String dep : dependencies) {
            deps.add(dep);
        }
        requestBody.add("coordinates", deps);

        return HttpRequest.newBuilder()
                .uri(URI.create(BASE_URL))
                .header("Content-Type", "application/json")
                .header("Authorization", "Bearer " + API_KEY)
                .POST(HttpRequest.BodyPublishers.ofString(requestBody.toString()))
                .build();
    }

    private DependencyInfo findDependencyInfo(String coordinate, DependencyInfo[] dependencies) {
        String path = coordinate.substring("pkg:maven/".length());
        for (DependencyInfo dep : dependencies) {
            if (dep.getPath().equals(path)) {
                return dep;
            }
        }
        return null;
    }

    @Override
    protected List<VulnerabilityInfo> parseVulnerabilityInfo(JsonArray vulnerabilitiesArray) {
        List<VulnerabilityInfo> vulnerabilityInfoList = new ArrayList<>();



        for (int j = 0; j < vulnerabilitiesArray.size(); j++) {
            JsonObject vulnObj = vulnerabilitiesArray.get(j).getAsJsonObject();

            JsonElement cveElement = vulnObj.get("cve");
            String cve = cveElement != null ? cveElement.getAsString() : "N/A";
            String description = vulnObj.get("description").getAsString();
            float cvssScore = (float) vulnObj.get("cvssScore").getAsDouble();

            VulnerabilityInfo vulnerabilityInfo = new VulnerabilityInfo(
                    cve,
                    description,
                    cvssScore,
                    VulnerabilityInfo.ScannerType.OSS
            );

            vulnerabilityInfoList.add(vulnerabilityInfo);
        }

        return vulnerabilityInfoList;
    }
}
