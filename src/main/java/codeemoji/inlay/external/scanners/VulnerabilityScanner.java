package codeemoji.inlay.external.scanners;

import codeemoji.inlay.external.DependencyInfo;
import codeemoji.inlay.external.VulnerabilityInfo;
import com.google.gson.JsonArray;

import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

public abstract class VulnerabilityScanner<T, U>{
    protected final String BASE_URL;
    protected final String API_KEY;
    protected final int API_BATCH_SIZE;

    protected Map<DependencyInfo, List<VulnerabilityInfo>> vulnerabilityMap = new HashMap<>();

    final HttpClient httpClient;

    public VulnerabilityScanner(String baseUrl, String apiKey, int batch_size) {
        this.BASE_URL = baseUrl;
        this.API_KEY = apiKey;
        this.API_BATCH_SIZE = batch_size;
        this.httpClient = HttpClient.newHttpClient();
    }

    public abstract Map<DependencyInfo, List<VulnerabilityInfo>> scanVulnerability(DependencyInfo[] dependencies);

    protected abstract CompletableFuture<U> scanVulnerabilityAsync(T param);

    protected abstract void processResponse(U results, DependencyInfo[] dependencies);

    protected abstract Void handleError(Throwable throwable);

    protected abstract HttpRequest createRequest(T param);

    protected abstract List<VulnerabilityInfo> parseVulnerabilityInfo(JsonArray vulnerabilitiesArray);
}
