package codeemoji.inlay.external.scanners;

import codeemoji.inlay.external.DependencyInfo;
import codeemoji.inlay.external.VulnerabilityInfo;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import java.net.URI;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

public class OSVVulnerabilityScanner extends VulnerabilityScanner<String, JsonObject> {

    private static final int REQUEST_THRESHOLD = 50;
    private static final long SLEEP_DURATION = 2000; // 2 second

    public OSVVulnerabilityScanner(String baseUrl, String apiKey, int batchSize) {
        super(baseUrl, apiKey, batchSize);
    }

    @Override
    public Map<DependencyInfo, List<VulnerabilityInfo>> scanVulnerability(DependencyInfo[] dependencies) {
        AtomicInteger requestCounter = new AtomicInteger(0);

        List<CompletableFuture<JsonObject>> futures = Arrays.stream(dependencies)
                .map(dep -> {
                    if (requestCounter.incrementAndGet() % REQUEST_THRESHOLD == 0) {
                        try {
                            Thread.sleep(SLEEP_DURATION);
                        } catch (InterruptedException e) {
                            Thread.currentThread().interrupt();
                            System.err.println("Sleep interrupted: " + e.getMessage());
                        }
                    }
                    return scanVulnerabilityAsync(dep.getPath());
                })
                .collect(Collectors.toList());

        CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]))
                .thenApply(v -> {
                    for (int i = 0; i < dependencies.length; i++) {
                        try {
                            JsonObject result = futures.get(i).join();
                            processResponse(result, new DependencyInfo[]{dependencies[i]});
                        } catch (Exception e) {
                            System.err.println("Error processing a future: " + e.getMessage());
                            handleError(e);
                        }
                    }
                    return null;
                })
                .exceptionally(this::handleError)
                .join();  // Wait for all processing to complete

        return vulnerabilityMap;
    }

    @Override
    protected CompletableFuture<JsonObject> scanVulnerabilityAsync(String dependency) {
        HttpRequest request = createRequest(dependency);

        return httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString())
                .thenApply(response -> {
                    if (response.statusCode() == 200) {
                        return JsonParser.parseString(response.body()).getAsJsonObject();
                    } else {
                        throw new RuntimeException("API request failed with status code: " + response.statusCode());
                    }
                });
    }

    @Override
    protected void processResponse(JsonObject results, DependencyInfo[] dependencies) {
        DependencyInfo dependency = dependencies[0];

        if (results.has("vulns")) {
            JsonArray vulns = results.getAsJsonArray("vulns");
            if (!vulns.isEmpty()) {
                List<VulnerabilityInfo> vulnInfoList = parseVulnerabilityInfo(vulns);
                vulnerabilityMap.put(dependency, vulnInfoList);
            }
        }
    }

    @Override
    protected Void handleError(Throwable throwable) {
        System.err.println("Error occurred while scanning dependencies: " + throwable.getMessage());
        throwable.printStackTrace();
        return null;
    }

    @Override
    public HttpRequest createRequest(String dependency) {
        JsonObject requestBody = new JsonObject();
        JsonObject packageObj = new JsonObject();
        packageObj.addProperty("purl", "pkg:maven/" + dependency);
        requestBody.add("package", packageObj);

        return HttpRequest.newBuilder()
                .uri(URI.create(BASE_URL + "/v1/query"))
                .header("Content-Type", "application/json")
                .POST(HttpRequest.BodyPublishers.ofString(requestBody.toString()))
                .build();
    }

    @Override
    protected List<VulnerabilityInfo> parseVulnerabilityInfo(JsonArray vulnerabilitiesArray) {
        List<VulnerabilityInfo> vulnerabilityInfoList = new ArrayList<>();

        for (int i = 0; i < vulnerabilitiesArray.size(); i++) {
            JsonObject vuln = vulnerabilitiesArray.get(i).getAsJsonObject();

            String id = vuln.get("id").getAsString();
            JsonElement descriptionElement = vuln.get("summary");
            String description = descriptionElement != null ? descriptionElement.getAsString() : "No description available";
            String cvssScore = calculateCVSSScore(vuln);

            VulnerabilityInfo vulnerabilityInfo = new VulnerabilityInfo(
                    id,
                    description,
                    cvssScore,
                    VulnerabilityInfo.ScannerType.OSV
            );

            vulnerabilityInfoList.add(vulnerabilityInfo);
        }

        return vulnerabilityInfoList;
    }

    private String calculateCVSSScore(JsonObject vuln) {
        String score = "ERROR";
        if (vuln.has("database_specific")) {
            JsonObject severities = vuln.getAsJsonObject("database_specific");
            score = severities.get("severity").getAsString();
        }
        return score;
    }
}