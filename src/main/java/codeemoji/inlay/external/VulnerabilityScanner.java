package codeemoji.inlay.external;

import org.json.JSONArray;
import org.json.JSONObject;

import java.net.URI;
import java.net.URLEncoder;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.concurrent.CompletableFuture;

public class VulnerabilityScanner {

    // TODO remove hard-coded variables
    private static final String OSS_INDEX_API_URL = "https://ossindex.sonatype.org/api/v3/component-report";
    private static final String NIST_NVD_API_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0";
    private static final String NIST_API_TOKEN = "624e5c6d-6f7d-4c3e-b7ad-7352e2958ef6";
    private static final String OSS_API_TOKEN = "d8b039a32f7113c9d23e5baa798322a1e92c2202";

    private final HttpClient httpClient;

    public VulnerabilityScanner() {
        this.httpClient = HttpClient.newHttpClient();
    }

    // TODO evaluate Pros/Cons of using OSS
    public CompletableFuture<JSONArray> scanDependenciesAsyncOSS(List<String> dependencies) {
        JSONObject requestBody = new JSONObject();
        requestBody.put("coordinates", new JSONArray(dependencies));

        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(OSS_INDEX_API_URL))
                .header("Content-Type", "application/json")
                .header("Authorization", "Bearer " + OSS_API_TOKEN)
                .POST(HttpRequest.BodyPublishers.ofString(requestBody.toString()))
                .build();

        return httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString())
                .thenApply(response -> {
                    if (response.statusCode() == 200) {
                        return new JSONArray(response.body());
                    } else {
                        throw new RuntimeException("API request failed with status code: " + response.statusCode());
                    }
                });
    }

    public CompletableFuture<JSONObject> scanDependencyAsyncNist(JSONObject dependency) {
        String apiUrl = createUrlNist(dependency);

        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(apiUrl))
                .header("apiKey", NIST_API_TOKEN )
                .GET()
                .build();

        return httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString())
                .thenApply(response -> {
                    if (response.statusCode() == 200) {
                        return new JSONObject(response.body());
                    } else {
                        throw new RuntimeException("API request failed with status code: " + response.statusCode());
                    }
                });
    }

    private String createUrlNist(JSONObject dependency) {
        String cpe = convertPackageToCpe(dependency);
        String encodedCpe = URLEncoder.encode(cpe, StandardCharsets.UTF_8);
        return NIST_NVD_API_URL + "?cpeName=" + encodedCpe;
    }

    private String convertPackageToCpe(JSONObject packageObject) {
        return String.format("cpe:2.3:a:%s:%s:%s:*:*:*:*:*:*:*", packageObject.get("groupId"), packageObject.get("artifactId"), packageObject.get("version"));
    }
}
